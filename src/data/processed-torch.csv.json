[{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":4.82,"iterations":99840000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.Tanh<br>             (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (6): cudnn.Tanh<br>             (7): nn.View(4096)<br>             (8): nn.Linear(4096 -> 128)<br>             (9): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.View(128, 1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"random":true,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"augment_channels_seperately":true,"readonly":true,"batchsize":128,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train_triplet_pnnet"},"mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"batchsize":128,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train_triplet_pnnet","update_itarations":2560,"model_cfg":{"model":"Pnnet32Original"},"hash":"8472275c804c9bdf59eef10871cd633b268c6d04","validation_samples":200,"date":"2016-12-16 06:07:41","report_path":"02d1f904-4b87-4b43-cbaa-d2aba9b52a06.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"599808","data_loader_valid":{"random":false,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"cache_images":true,"readonly":true,"batchsize":500,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid"},"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train_triplet_pnnet\/mean.png","guid":"02d1f904-4b87-4b43-cbaa-d2aba9b52a06","validation_iterations":256000,"training_iterations":100000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":15.41,"iterations":48800000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 256)<br>      |      (9): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 256)<br>      |      (9): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.Tanh<br>             (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (6): cudnn.Tanh<br>             (7): nn.View(4096)<br>             (8): nn.Linear(4096 -> 256)<br>             (9): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.Reshape(1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"random":true,"augmentations":["remove_mean_pixel"],"augment_channels_seperately":true,"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet\/mean.png","format":"float"},"batchsize":400,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet"},"batchsize":400,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet","update_itarations":8000,"model_cfg":{"no_batch_norm":true,"nfeat":256,"width":32,"model":"Pnnet32"},"hash":"61d1253471c334c74ce9efce77a18dee8364610b","validation_samples":200,"date":"2016-12-15 17:45:17","report_path":"03d89c4d-f429-4719-c7d7-5de94f2666e6.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"1124224","mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet\/mean.png","data_loader_valid":{"random":false,"augmentations":["remove_mean_pixel"],"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet\/mean.png","format":"float"},"cache_images":true,"batchsize":500,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid"},"guid":"03d89c4d-f429-4719-c7d7-5de94f2666e6","validation_iterations":800000,"training_iterations":100000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":14.302,"iterations":12000000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 256)<br>      |      (9): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 256)<br>      |      (9): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.Tanh<br>             (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (6): cudnn.Tanh<br>             (7): nn.View(4096)<br>             (8): nn.Linear(4096 -> 256)<br>             (9): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.Reshape(1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"random":true,"normalize_mean_sigma":{"mean":0.48544601108437,"sigma":0.18649942105166},"augment_channels_seperately":true,"triplet":true,"readonly":true,"batchsize":400,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train"},"mean_sigma":{"mean":0.48544601108437,"sigma":0.18649942105166},"batchsize":400,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train","update_itarations":8000,"model_cfg":{"no_batch_norm":true,"nfeat":256,"width":32,"model":"Pnnet32"},"hash":"742f9ecabc5e57ddff4283788441d4f6d10049dc","validation_samples":200,"date":"2016-12-15 18:35:44","report_path":"12840be8-7fe5-4341-c3d5-1242c9e473eb.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"1124224","data_loader_valid":{"random":false,"normalize_mean_sigma":{"mean":0.48544601108437,"sigma":0.18649942105166},"cache_images":true,"readonly":true,"batchsize":500,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid"},"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train\/mean.png","guid":"12840be8-7fe5-4341-c3d5-1242c9e473eb","validation_iterations":800000,"training_iterations":100000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"margin_one","algorithm":"sgd","config":{"nesterov":true,"weightDecay":0.0001,"learningRate":0.1,"dampening":0,"learningRateDecay":1e-06,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid\/pairs.t7","mode":"matching","score_metric":"Error95","evaluation":"EmbeddingEval"},"results":{"score1":4.3707595981559,"iterations":14336000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): nn.Sequential {<br>      |        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> output]<br>      |        (1): cudnn.SpatialConvolution(1 -> 40, 3x3, 1,1, 1,1) without bias<br>      |        (2): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(40 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (3): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(60 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (4): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (5): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (6): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (7): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (8): nn.JoinTable<br>      |        (9): cudnn.SpatialBatchNormalization<br>      |        (10): cudnn.ReLU<br>      |        (11): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |        (12): nn.Dropout(0.500000)<br>      |        (13): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (14): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (15): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (16): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (17): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (18): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (19): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (20): nn.JoinTable<br>      |        (21): cudnn.SpatialBatchNormalization<br>      |        (22): cudnn.ReLU<br>      |        (23): cudnn.SpatialConvolution(200 -> 100, 1x1) without bias<br>      |        (24): nn.Dropout(0.500000)<br>      |        (25): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (26): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (27): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (28): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (29): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (30): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (31): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(200 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (32): nn.JoinTable<br>      |        (33): cudnn.SpatialBatchNormalization<br>      |        (34): cudnn.ReLU<br>      |        (35): cudnn.SpatialAveragePooling(8x8, 8,8)<br>      |        (36): nn.Reshape(220)<br>      |        (37): nn.Linear(220 -> 128)<br>      |      }<br>      |      (3): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): nn.Sequential {<br>      |        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> output]<br>      |        (1): cudnn.SpatialConvolution(1 -> 40, 3x3, 1,1, 1,1) without bias<br>      |        (2): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(40 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (3): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(60 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (4): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (5): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (6): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (7): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (8): nn.JoinTable<br>      |        (9): cudnn.SpatialBatchNormalization<br>      |        (10): cudnn.ReLU<br>      |        (11): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |        (12): nn.Dropout(0.500000)<br>      |        (13): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (14): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (15): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (16): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (17): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (18): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (19): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (20): nn.JoinTable<br>      |        (21): cudnn.SpatialBatchNormalization<br>      |        (22): cudnn.ReLU<br>      |        (23): cudnn.SpatialConvolution(200 -> 100, 1x1) without bias<br>      |        (24): nn.Dropout(0.500000)<br>      |        (25): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (26): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (27): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (28): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (29): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (30): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (31): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(200 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (32): nn.JoinTable<br>      |        (33): cudnn.SpatialBatchNormalization<br>      |        (34): cudnn.ReLU<br>      |        (35): cudnn.SpatialAveragePooling(8x8, 8,8)<br>      |        (36): nn.Reshape(220)<br>      |        (37): nn.Linear(220 -> 128)<br>      |      }<br>      |      (3): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): nn.Sequential {<br>               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> output]<br>               (1): cudnn.SpatialConvolution(1 -> 40, 3x3, 1,1, 1,1) without bias<br>               (2): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(40 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (3): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(60 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (4): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (5): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (6): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (7): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (8): nn.JoinTable<br>               (9): cudnn.SpatialBatchNormalization<br>               (10): cudnn.ReLU<br>               (11): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>               (12): nn.Dropout(0.500000)<br>               (13): cudnn.SpatialAveragePooling(2x2, 2,2)<br>               (14): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (15): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (16): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (17): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (18): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (19): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (20): nn.JoinTable<br>               (21): cudnn.SpatialBatchNormalization<br>               (22): cudnn.ReLU<br>               (23): cudnn.SpatialConvolution(200 -> 100, 1x1) without bias<br>               (24): nn.Dropout(0.500000)<br>               (25): cudnn.SpatialAveragePooling(2x2, 2,2)<br>               (26): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (27): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (28): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (29): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (30): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (31): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(200 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (32): nn.JoinTable<br>               (33): cudnn.SpatialBatchNormalization<br>               (34): cudnn.ReLU<br>               (35): cudnn.SpatialAveragePooling(8x8, 8,8)<br>               (36): nn.Reshape(220)<br>               (37): nn.Linear(220 -> 128)<br>             }<br>             (3): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.Reshape(1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.CSubTable<br>}","data_loader_train":{"readonly":true,"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","format":"float"},"random":true,"augmentations":["normalize_minmax","remove_mean_pixel"],"augment_channels_seperately":true,"triplet_hard":true,"batchsize":32,"triplet":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train"},"batchsize":32,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train","update_itarations":3200,"model_cfg":{"depth":40,"margin_criterion":true,"growthRate":20,"tensorType":"torch.CudaTensor","optMemory":4,"reduction":0.5,"model":"DenseNet","bottleneck":true,"size":32,"nfeat":128,"dropRate":0.5},"hash":"6b1eccee22780687fae83edd6957a6354aa40c94","validation_samples":200,"date":"2017-10-11 17:44:53","report_path":"2133c482-12cf-4333-c338-9171d4b31253.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"506728","mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","data_loader_valid":{"random":false,"augmentations":["normalize_minmax","remove_mean_pixel"],"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","format":"float"},"cache_images":true,"batchsize":500,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid"},"guid":"2133c482-12cf-4333-c338-9171d4b31253","validation_iterations":32000,"training_iterations":1000000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"margin_one","algorithm":"sgd","config":{"nesterov":true,"weightDecay":0.0001,"learningRate":0.1,"dampening":0,"learningRateDecay":1e-06,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid\/pairs.t7","mode":"matching","score_metric":"Error95","evaluation":"EmbeddingEval"},"results":{"score1":4.4130964119695,"iterations":14048000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): nn.Sequential {<br>      |        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> output]<br>      |        (1): cudnn.SpatialConvolution(1 -> 40, 3x3, 1,1, 1,1) without bias<br>      |        (2): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(40 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (3): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(60 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (4): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (5): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (6): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (7): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (8): nn.JoinTable<br>      |        (9): cudnn.SpatialBatchNormalization<br>      |        (10): cudnn.ReLU<br>      |        (11): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |        (12): nn.Dropout(0.500000)<br>      |        (13): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (14): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (15): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (16): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (17): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (18): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (19): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (20): nn.JoinTable<br>      |        (21): cudnn.SpatialBatchNormalization<br>      |        (22): cudnn.ReLU<br>      |        (23): cudnn.SpatialConvolution(200 -> 100, 1x1) without bias<br>      |        (24): nn.Dropout(0.500000)<br>      |        (25): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (26): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (27): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (28): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (29): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (30): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (31): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(200 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (32): nn.JoinTable<br>      |        (33): cudnn.SpatialBatchNormalization<br>      |        (34): cudnn.ReLU<br>      |        (35): cudnn.SpatialAveragePooling(8x8, 8,8)<br>      |        (36): nn.Reshape(220)<br>      |        (37): nn.Linear(220 -> 128)<br>      |      }<br>      |      (3): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): nn.Sequential {<br>      |        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> output]<br>      |        (1): cudnn.SpatialConvolution(1 -> 40, 3x3, 1,1, 1,1) without bias<br>      |        (2): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(40 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (3): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(60 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (4): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (5): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (6): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (7): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (8): nn.JoinTable<br>      |        (9): cudnn.SpatialBatchNormalization<br>      |        (10): cudnn.ReLU<br>      |        (11): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |        (12): nn.Dropout(0.500000)<br>      |        (13): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (14): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (15): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (16): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (17): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (18): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (19): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (20): nn.JoinTable<br>      |        (21): cudnn.SpatialBatchNormalization<br>      |        (22): cudnn.ReLU<br>      |        (23): cudnn.SpatialConvolution(200 -> 100, 1x1) without bias<br>      |        (24): nn.Dropout(0.500000)<br>      |        (25): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (26): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (27): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (28): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (29): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (30): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (31): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(200 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (32): nn.JoinTable<br>      |        (33): cudnn.SpatialBatchNormalization<br>      |        (34): cudnn.ReLU<br>      |        (35): cudnn.SpatialAveragePooling(8x8, 8,8)<br>      |        (36): nn.Reshape(220)<br>      |        (37): nn.Linear(220 -> 128)<br>      |      }<br>      |      (3): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): nn.Sequential {<br>               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> output]<br>               (1): cudnn.SpatialConvolution(1 -> 40, 3x3, 1,1, 1,1) without bias<br>               (2): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(40 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (3): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(60 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (4): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (5): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (6): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (7): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (8): nn.JoinTable<br>               (9): cudnn.SpatialBatchNormalization<br>               (10): cudnn.ReLU<br>               (11): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>               (12): nn.Dropout(0.500000)<br>               (13): cudnn.SpatialAveragePooling(2x2, 2,2)<br>               (14): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (15): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (16): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (17): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (18): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (19): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (20): nn.JoinTable<br>               (21): cudnn.SpatialBatchNormalization<br>               (22): cudnn.ReLU<br>               (23): cudnn.SpatialConvolution(200 -> 100, 1x1) without bias<br>               (24): nn.Dropout(0.500000)<br>               (25): cudnn.SpatialAveragePooling(2x2, 2,2)<br>               (26): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (27): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (28): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (29): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (30): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (31): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(200 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (32): nn.JoinTable<br>               (33): cudnn.SpatialBatchNormalization<br>               (34): cudnn.ReLU<br>               (35): cudnn.SpatialAveragePooling(8x8, 8,8)<br>               (36): nn.Reshape(220)<br>               (37): nn.Linear(220 -> 128)<br>             }<br>             (3): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.Reshape(1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.CSubTable<br>}","data_loader_train":{"readonly":true,"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","format":"float"},"random":true,"augmentations":["normalize_minmax","remove_mean_pixel"],"augment_channels_seperately":true,"triplet_hard":true,"batchsize":32,"triplet":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train"},"batchsize":32,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train","update_itarations":3200,"model_cfg":{"depth":40,"margin_criterion":true,"growthRate":20,"tensorType":"torch.CudaTensor","optMemory":4,"reduction":0.5,"model":"DenseNet","bottleneck":true,"size":32,"nfeat":128,"dropRate":0.5},"hash":"b4fe35370e9664e540a6de30a0162de891b07c89","validation_samples":200,"date":"2017-10-11 17:44:53","report_path":"2133c482-12cf-4333-c338-9171d4b31253.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"506728","mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","data_loader_valid":{"random":false,"augmentations":["normalize_minmax","remove_mean_pixel"],"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","format":"float"},"cache_images":true,"batchsize":500,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid"},"guid":"2133c482-12cf-4333-c338-9171d4b31253","validation_iterations":32000,"training_iterations":1000000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"margin_one","algorithm":"sgd","config":{"nesterov":true,"weightDecay":0.0001,"learningRate":0.1,"dampening":0,"learningRateDecay":1e-06,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid\/pairs.t7","mode":"matching","score_metric":"Error95","evaluation":"EmbeddingEval"},"results":{"score1":8.2427028802133,"iterations":11936000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): nn.Sequential {<br>      |        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> output]<br>      |        (1): cudnn.SpatialConvolution(1 -> 40, 3x3, 1,1, 1,1) without bias<br>      |        (2): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(40 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (3): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(60 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (4): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (5): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (6): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (7): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (8): nn.JoinTable<br>      |        (9): cudnn.SpatialBatchNormalization<br>      |        (10): cudnn.ReLU<br>      |        (11): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |        (12): nn.Dropout(0.500000)<br>      |        (13): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (14): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (15): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (16): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (17): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (18): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (19): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (20): nn.JoinTable<br>      |        (21): cudnn.SpatialBatchNormalization<br>      |        (22): cudnn.ReLU<br>      |        (23): cudnn.SpatialConvolution(200 -> 100, 1x1) without bias<br>      |        (24): nn.Dropout(0.500000)<br>      |        (25): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (26): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (27): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (28): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (29): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (30): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (31): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(200 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (32): nn.JoinTable<br>      |        (33): cudnn.SpatialBatchNormalization<br>      |        (34): cudnn.ReLU<br>      |        (35): cudnn.SpatialAveragePooling(8x8, 8,8)<br>      |        (36): nn.Reshape(220)<br>      |        (37): nn.Linear(220 -> 128)<br>      |      }<br>      |      (3): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): nn.Sequential {<br>      |        [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> output]<br>      |        (1): cudnn.SpatialConvolution(1 -> 40, 3x3, 1,1, 1,1) without bias<br>      |        (2): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(40 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (3): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(60 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (4): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (5): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (6): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (7): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (8): nn.JoinTable<br>      |        (9): cudnn.SpatialBatchNormalization<br>      |        (10): cudnn.ReLU<br>      |        (11): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |        (12): nn.Dropout(0.500000)<br>      |        (13): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (14): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (15): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (16): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (17): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (18): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (19): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (20): nn.JoinTable<br>      |        (21): cudnn.SpatialBatchNormalization<br>      |        (22): cudnn.ReLU<br>      |        (23): cudnn.SpatialConvolution(200 -> 100, 1x1) without bias<br>      |        (24): nn.Dropout(0.500000)<br>      |        (25): cudnn.SpatialAveragePooling(2x2, 2,2)<br>      |        (26): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (27): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (28): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (29): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (30): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (31): DenseConnectLayerCustom {<br>      |          {input}<br>      |            |`-> (1): nn.Sequential {<br>      |            |      [input -> (1) -> (2) -> output]<br>      |            |      (1): cudnn.SpatialBatchNormalization<br>      |            |      (2): cudnn.ReLU<br>      |            |    }<br>      |             `-> (2): nn.Sequential {<br>      |                   [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |                   (1): cudnn.SpatialConvolution(200 -> 80, 1x1) without bias<br>      |                   (2): cudnn.SpatialBatchNormalization<br>      |                   (3): cudnn.ReLU<br>      |                   (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>      |                 }<br>      |             ... -> {output}<br>      |        }<br>      |        (32): nn.JoinTable<br>      |        (33): cudnn.SpatialBatchNormalization<br>      |        (34): cudnn.ReLU<br>      |        (35): cudnn.SpatialAveragePooling(8x8, 8,8)<br>      |        (36): nn.Reshape(220)<br>      |        (37): nn.Linear(220 -> 128)<br>      |      }<br>      |      (3): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): nn.Sequential {<br>               [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> output]<br>               (1): cudnn.SpatialConvolution(1 -> 40, 3x3, 1,1, 1,1) without bias<br>               (2): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(40 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (3): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(60 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (4): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (5): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (6): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (7): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (8): nn.JoinTable<br>               (9): cudnn.SpatialBatchNormalization<br>               (10): cudnn.ReLU<br>               (11): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>               (12): nn.Dropout(0.500000)<br>               (13): cudnn.SpatialAveragePooling(2x2, 2,2)<br>               (14): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(80 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (15): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (16): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (17): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (18): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (19): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (20): nn.JoinTable<br>               (21): cudnn.SpatialBatchNormalization<br>               (22): cudnn.ReLU<br>               (23): cudnn.SpatialConvolution(200 -> 100, 1x1) without bias<br>               (24): nn.Dropout(0.500000)<br>               (25): cudnn.SpatialAveragePooling(2x2, 2,2)<br>               (26): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(100 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (27): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(120 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (28): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(140 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (29): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(160 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (30): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(180 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (31): DenseConnectLayerCustom {<br>                 {input}<br>                   |`-> (1): nn.Sequential {<br>                   |      [input -> (1) -> (2) -> output]<br>                   |      (1): cudnn.SpatialBatchNormalization<br>                   |      (2): cudnn.ReLU<br>                   |    }<br>                    `-> (2): nn.Sequential {<br>                          [input -> (1) -> (2) -> (3) -> (4) -> output]<br>                          (1): cudnn.SpatialConvolution(200 -> 80, 1x1) without bias<br>                          (2): cudnn.SpatialBatchNormalization<br>                          (3): cudnn.ReLU<br>                          (4): cudnn.SpatialConvolution(80 -> 20, 3x3, 1,1, 1,1) without bias<br>                        }<br>                    ... -> {output}<br>               }<br>               (32): nn.JoinTable<br>               (33): cudnn.SpatialBatchNormalization<br>               (34): cudnn.ReLU<br>               (35): cudnn.SpatialAveragePooling(8x8, 8,8)<br>               (36): nn.Reshape(220)<br>               (37): nn.Linear(220 -> 128)<br>             }<br>             (3): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.Reshape(1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.CSubTable<br>}","data_loader_train":{"readonly":true,"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","format":"float"},"random":true,"augmentations":["normalize_minmax","remove_mean_pixel"],"augment_channels_seperately":true,"triplet_hard":true,"batchsize":32,"triplet":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train"},"batchsize":32,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train","update_itarations":3200,"model_cfg":{"depth":40,"margin_criterion":true,"growthRate":20,"tensorType":"torch.CudaTensor","optMemory":4,"reduction":0.5,"model":"DenseNet","bottleneck":true,"size":32,"nfeat":128,"dropRate":0.5},"hash":"d68ba21dbe2928df867948d53a2b66b8f075e76a","validation_samples":200,"date":"2017-10-11 17:44:53","report_path":"2133c482-12cf-4333-c338-9171d4b31253.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"506728","mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","data_loader_valid":{"random":false,"augmentations":["normalize_minmax","remove_mean_pixel"],"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","format":"float"},"cache_images":true,"batchsize":500,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid"},"guid":"2133c482-12cf-4333-c338-9171d4b31253","validation_iterations":32000,"training_iterations":1000000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":10.848,"iterations":52992000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.SpatialBatchNormalization<br>      |      (4): cudnn.Tanh<br>      |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (6): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (7): cudnn.SpatialBatchNormalization<br>      |      (8): cudnn.Tanh<br>      |      (9): nn.View(4096)<br>      |      (10): nn.Linear(4096 -> 256)<br>      |      (11): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.SpatialBatchNormalization<br>      |      (4): cudnn.Tanh<br>      |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (6): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (7): cudnn.SpatialBatchNormalization<br>      |      (8): cudnn.Tanh<br>      |      (9): nn.View(4096)<br>      |      (10): nn.Linear(4096 -> 256)<br>      |      (11): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.SpatialBatchNormalization<br>             (4): cudnn.Tanh<br>             (5): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (6): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (7): cudnn.SpatialBatchNormalization<br>             (8): cudnn.Tanh<br>             (9): nn.View(4096)<br>             (10): nn.Linear(4096 -> 256)<br>             (11): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.Reshape(1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"random":true,"augmentations":["remove_mean_pixel"],"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train\/mean.png","format":"float"},"cache_images":true,"triplet":true,"batchsize":128,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train"},"batchsize":128,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train","update_itarations":2560,"model_cfg":{"width":32,"nfeat":256,"model":"Pnnet32"},"hash":"be3433a184c4fc17be4210567ac9247b3ab6d54d","validation_samples":200,"date":"2016-12-15 17:44:59","report_path":"4c542307-bca5-4f12-cf75-a31328ab2578.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"1124416","mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train\/mean.png","data_loader_valid":{"random":false,"augmentations":["remove_mean_pixel"],"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train\/mean.png","format":"float"},"cache_images":true,"batchsize":500,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid"},"guid":"4c542307-bca5-4f12-cf75-a31328ab2578","validation_iterations":256000,"training_iterations":100000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":8.794,"iterations":999936000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.Tanh<br>             (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (6): cudnn.Tanh<br>             (7): nn.View(4096)<br>             (8): nn.Linear(4096 -> 128)<br>             (9): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.View(128, 1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"random":true,"normalize_mean_sigma":{"mean":0.48544601108437,"sigma":0.18649942105166},"augment_channels_seperately":true,"readonly":true,"batchsize":128,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/train_triplet_pnnet"},"mean_sigma":{"mean":0.48544601108437,"sigma":0.18649942105166},"batchsize":128,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/train_triplet_pnnet","update_itarations":2560,"model_cfg":{"model":"Pnnet32Original"},"hash":"e050dd925a94f46f484a132ec877d13c03772bf5","validation_samples":200,"date":"2016-12-20 10:20:17","report_path":"582d629c-6eba-46bc-c678-bcfa6b384f3b.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"599808","data_loader_valid":{"random":false,"normalize_mean_sigma":{"mean":0.48544601108437,"sigma":0.18649942105166},"cache_images":true,"readonly":true,"batchsize":500,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid"},"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/train_triplet_pnnet\/mean.png","guid":"582d629c-6eba-46bc-c678-bcfa6b384f3b","validation_iterations":256000,"training_iterations":1000000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":11.372,"iterations":76800000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.SpatialBatchNormalization<br>      |      (4): cudnn.Tanh<br>      |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (6): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (7): cudnn.SpatialBatchNormalization<br>      |      (8): cudnn.Tanh<br>      |      (9): nn.View(4096)<br>      |      (10): nn.Linear(4096 -> 256)<br>      |      (11): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.SpatialBatchNormalization<br>      |      (4): cudnn.Tanh<br>      |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (6): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (7): cudnn.SpatialBatchNormalization<br>      |      (8): cudnn.Tanh<br>      |      (9): nn.View(4096)<br>      |      (10): nn.Linear(4096 -> 256)<br>      |      (11): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.SpatialBatchNormalization<br>             (4): cudnn.Tanh<br>             (5): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (6): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (7): cudnn.SpatialBatchNormalization<br>             (8): cudnn.Tanh<br>             (9): nn.View(4096)<br>             (10): nn.Linear(4096 -> 256)<br>             (11): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.Reshape(1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"random":true,"augmentations":["remove_mean_pixel"],"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train\/mean.png","format":"float"},"cache_images":true,"triplet":true,"batchsize":400,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train"},"batchsize":400,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train","update_itarations":8000,"model_cfg":{"width":32,"nfeat":256,"model":"Pnnet32"},"hash":"375071a8264bdc8d6a512b94b7a545820adc9c2a","validation_samples":200,"date":"2016-12-15 17:44:57","report_path":"7313a5f6-787f-49aa-c957-cf3a35184bbf.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"1124416","mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train\/mean.png","data_loader_valid":{"random":false,"augmentations":["remove_mean_pixel"],"remove_mean_pixel":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train\/mean.png","format":"float"},"cache_images":true,"batchsize":500,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid"},"guid":"7313a5f6-787f-49aa-c957-cf3a35184bbf","validation_iterations":800000,"training_iterations":100000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":15.098,"iterations":6656000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.Tanh<br>             (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (6): cudnn.Tanh<br>             (7): nn.View(4096)<br>             (8): nn.Linear(4096 -> 128)<br>             (9): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.View(128, 1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"random":true,"normalize_mean_sigma":{"mean":0.48544601108437,"sigma":0.18649942105166},"augment_channels_seperately":true,"triplet":true,"readonly":true,"batchsize":128,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train"},"mean_sigma":{"mean":0.48544601108437,"sigma":0.18649942105166},"batchsize":128,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train","update_itarations":2560,"model_cfg":{"model":"Pnnet32Original"},"hash":"0fdd9a84d75fe2b44213d6dabaa0528b41583dcf","validation_samples":200,"date":"2016-12-15 19:31:10","report_path":"88de8eca-a3e6-43d7-c338-5ae263ce5a05.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"599808","data_loader_valid":{"random":false,"normalize_mean_sigma":{"mean":0.48544601108437,"sigma":0.18649942105166},"cache_images":true,"readonly":true,"batchsize":500,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid"},"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train\/mean.png","guid":"88de8eca-a3e6-43d7-c338-5ae263ce5a05","validation_iterations":256000,"training_iterations":100000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":3.532,"iterations":175616000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.Tanh<br>             (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (6): cudnn.Tanh<br>             (7): nn.View(4096)<br>             (8): nn.Linear(4096 -> 128)<br>             (9): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.View(128, 1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"readonly":true,"random":true,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"augment_channels_seperately":true,"triplet_hard":true,"triplet":true,"batchsize":128,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train"},"mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"batchsize":128,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train","update_itarations":2560,"model_cfg":{"model":"Pnnet32Original"},"hash":"44a7876715a7b2218aeee611af0e465b4ed14aa2","validation_samples":200,"date":"2017-01-18 11:09:01","report_path":"a1412c7b-22a4-4d22-cd36-0180b4f88dac.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"599808","data_loader_valid":{"random":false,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"cache_images":true,"readonly":true,"batchsize":500,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid"},"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","guid":"a1412c7b-22a4-4d22-cd36-0180b4f88dac","validation_iterations":256000,"training_iterations":1000000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":4.328,"iterations":99840000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.Tanh<br>             (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (6): cudnn.Tanh<br>             (7): nn.View(4096)<br>             (8): nn.Linear(4096 -> 128)<br>             (9): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.View(128, 1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"random":true,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"augment_channels_seperately":true,"triplet":true,"readonly":true,"batchsize":128,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train"},"mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"batchsize":128,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train","update_itarations":2560,"model_cfg":{"model":"Pnnet32Original"},"hash":"ee8d2e2b2a04d5328f479b2e778b682304d2ecae","validation_samples":200,"date":"2016-12-16 06:27:12","report_path":"b0b231e3-e6d2-4429-c458-c77ea41f19f3.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"599808","data_loader_valid":{"random":false,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"cache_images":true,"readonly":true,"batchsize":500,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame32\/valid"},"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","guid":"b0b231e3-e6d2-4429-c458-c77ea41f19f3","validation_iterations":256000,"training_iterations":100000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":12.042,"iterations":100000000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.SpatialBatchNormalization<br>      |      (4): cudnn.Tanh<br>      |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (6): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (7): cudnn.SpatialBatchNormalization<br>      |      (8): cudnn.Tanh<br>      |      (9): nn.View(4096)<br>      |      (10): nn.Linear(4096 -> 256)<br>      |      (11): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.SpatialBatchNormalization<br>      |      (4): cudnn.Tanh<br>      |      (5): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (6): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (7): cudnn.SpatialBatchNormalization<br>      |      (8): cudnn.Tanh<br>      |      (9): nn.View(4096)<br>      |      (10): nn.Linear(4096 -> 256)<br>      |      (11): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.SpatialBatchNormalization<br>             (4): cudnn.Tanh<br>             (5): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (6): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (7): cudnn.SpatialBatchNormalization<br>             (8): cudnn.Tanh<br>             (9): nn.View(4096)<br>             (10): nn.Linear(4096 -> 256)<br>             (11): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.Reshape(1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.Reshape(1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.Reshape(1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"random":true,"augmentations":["remove_mean"],"augment_channels_seperately":true,"cache_images":true,"remove_mean":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet\/mean.png","format":"float"},"batchsize":400,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet"},"batchsize":400,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet","update_itarations":8000,"model_cfg":{"width":32,"nfeat":256,"model":"Pnnet32"},"hash":"6ba22ee22f1790349904e053707f29f962f8c572","validation_samples":200,"date":"2016-12-15 03:22:57","report_path":"b1b1e39d-998d-41f9-c135-5b9d0115e4f2.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"1124416","mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet\/mean.png","data_loader_valid":{"random":false,"augmentations":["remove_mean"],"cache_images":true,"remove_mean":{"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/notredame\/train_triplet\/mean.png","format":"float"},"batchsize":500,"readonly":true,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid"},"guid":"b1b1e39d-998d-41f9-c135-5b9d0115e4f2","validation_iterations":800000,"training_iterations":100000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":8.62,"iterations":56832000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.Tanh<br>             (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (6): cudnn.Tanh<br>             (7): nn.View(4096)<br>             (8): nn.Linear(4096 -> 128)<br>             (9): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.View(128, 1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"readonly":true,"random":true,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"augment_channels_seperately":true,"triplet_hard":true,"triplet":true,"batchsize":128,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train"},"mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"batchsize":128,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train","update_itarations":12800,"model_cfg":{"model":"Pnnet32Original"},"hash":"06f671579113933da3d19b05b2bd34de728d547e","validation_samples":200,"date":"2017-01-22 18:48:33","report_path":"f4f05eed-e484-4463-c4a2-321ddd3d7b4e.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"599808","data_loader_valid":{"random":false,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"cache_images":true,"readonly":true,"batchsize":500,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid"},"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","guid":"f4f05eed-e484-4463-c4a2-321ddd3d7b4e","validation_iterations":128000,"training_iterations":1000000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"},{"optimizer_cfg":{"label_fnc":"triplet_one","algorithm":"sgd","config":{"weightDecay":0.0001,"learningRateDecay":1e-06,"learningRate":0.1,"momentum":0.9}},"validation":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid","evaluation_cfg":{"pairs":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid\/pairs.t7","mode":"matching","score_metric":"FPR95","evaluation":"EmbeddingEval"},"results":{"score1":9.13,"iterations":999936000},"network":"nn.Sequential {<br>  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> output]<br>  (1): nn.SplitTable<br>  (2): nn.ParallelTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>      |      (1): nn.Reshape(1x32x32)<br>      |      (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>      |      (3): cudnn.Tanh<br>      |      (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>      |      (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>      |      (6): cudnn.Tanh<br>      |      (7): nn.View(4096)<br>      |      (8): nn.Linear(4096 -> 128)<br>      |      (9): cudnn.Tanh<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> output]<br>             (1): nn.Reshape(1x32x32)<br>             (2): cudnn.SpatialConvolution(1 -> 32, 7x7)<br>             (3): cudnn.Tanh<br>             (4): cudnn.SpatialMaxPooling(2x2, 2,2)<br>             (5): cudnn.SpatialConvolution(32 -> 64, 6x6)<br>             (6): cudnn.Tanh<br>             (7): nn.View(4096)<br>             (8): nn.Linear(4096 -> 128)<br>             (9): cudnn.Tanh<br>           }<br>       ... -> output<br>  }<br>  (3): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>      |`-> (2): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(2)<br>      |           `-> (2): nn.SelectTable(3)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.PairwiseDistance<br>      |      (3): nn.View(128, 1)<br>      |    }<br>       `-> (3): nn.Sequential {<br>             [input -> (1) -> (2) -> (3) -> output]<br>             (1): nn.ConcatTable {<br>               input<br>                 |`-> (1): nn.SelectTable(1)<br>                  `-> (2): nn.SelectTable(3)<br>                  ... -> output<br>             }<br>             (2): nn.PairwiseDistance<br>             (3): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (4): nn.ConcatTable {<br>    input<br>      |`-> (1): nn.Sequential {<br>      |      [input -> (1) -> (2) -> (3) -> (4) -> output]<br>      |      (1): nn.ConcatTable {<br>      |        input<br>      |          |`-> (1): nn.SelectTable(1)<br>      |           `-> (2): nn.SelectTable(2)<br>      |           ... -> output<br>      |      }<br>      |      (2): nn.JoinTable<br>      |      (3): nn.Min<br>      |      (4): nn.View(128, 1)<br>      |    }<br>       `-> (2): nn.Sequential {<br>             [input -> (1) -> (2) -> output]<br>             (1): nn.SelectTable(3)<br>             (2): nn.View(128, 1)<br>           }<br>       ... -> output<br>  }<br>  (5): nn.JoinTable<br>}","data_loader_train":{"readonly":true,"random":true,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"augment_channels_seperately":true,"triplet_hard":true,"triplet":true,"batchsize":128,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train"},"mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"batchsize":128,"opt_cache":"\/data\/mkeglevic\/workspace\/torch-learning\/opt_cache","patch_size":32,"training":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train","update_itarations":12800,"model_cfg":{"model":"Pnnet32Original"},"hash":"9f3f47ccaad9aa0abf666f5e1f94aad6a9b3d272","validation_samples":200,"date":"2017-01-22 18:48:33","report_path":"f4f05eed-e484-4463-c4a2-321ddd3d7b4e.htm","reportPath":"\/data\/mkeglevic\/datasets\/processed-torch\/reports","loglevel":"trace","parameter":"599808","data_loader_valid":{"random":false,"normalize_mean_sigma":{"mean":0.44372847601928,"sigma":0.20197947209031},"cache_images":true,"readonly":true,"batchsize":500,"augmentations":["normalize_mean_sigma"],"path":"\/data\/mkeglevic\/datasets\/processed-torch\/yosemite32\/valid"},"mean":"\/data\/mkeglevic\/datasets\/processed-torch\/liberty32\/train\/mean.png","guid":"f4f05eed-e484-4463-c4a2-321ddd3d7b4e","validation_iterations":128000,"training_iterations":1000000000,"path":"\/data\/mkeglevic\/datasets\/processed-torch\/"}]